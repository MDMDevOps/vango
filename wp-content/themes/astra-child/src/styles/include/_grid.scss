 @mixin grid( $size ) {
     [class*="ac-col-#{$size}"] {
        float : left;
        &.end { float: right; }
     }

    @for $i from 0 through $grid-columns {
        .ac-col-#{$size}-#{$i} {
            width: percentage( $i / $grid-columns );
        }
        .ac-col-#{$size}-push-#{$i} {
            position: relative;
            left: percentage( $i / $grid-columns );
            right: auto;
        }
        .ac-col-#{$size}-pull-#{$i} {
            position: relative;
            right: percentage( $i / $grid-columns);
            left: auto;
        }
        .ac-col-#{$size}-offset-#{$i} {
            margin-left: percentage( $i / $grid-columns );
        }
    }
    [class*="ac-col-"] {
		&.#{$size}-reset-order {
		    float: left;
		    left: auto;
		    right: auto;
		    margin-left: 0;
		    margin-right: 0;
		}
		&.#{$size}-centered {
		    margin-left: auto;
		    margin-right: auto;
		    float: none;
		}
		&.#{$size}-uncentered {
		    float: left;
		    margin-left: 0;
		    margin-right: 0;
		}
		&.#{$size}-end { float: left; } // keeps last child from getting float: right
		&.#{$size}-centered:last-child { float: none; } // keep last-child from getting float: right
		&.#{$size}-uncentered:last-child { float: left; } // keep last-child from getting float: right
		&.#{$size}-uncentered.opposite { float: right; }
		.row-container, .grid-container {
		    &.#{$size}-collapse > [class*="ac-col-"] {
		        padding-right: 0;
		        padding-left: 0;
		    }
		    &.#{$size}-collapse .row {
		        margin-left: 0;
		        margin-right: 0;
		    }
		    &.#{$size}-uncollapse > [class*="ac-col-"] {
		        padding-right: $gutter;
		        padding-left: $gutter;
		    }
		}
    }
}



.row,
.grid,
.fl-col-group
 {
    margin: 0;
    margin-left: 0 - $gutter;
    margin-right: 0 - $gutter;
    padding: 0;
    box-sizing: border-box;
    @include clearfix;
    &.ac-collapse > [class*="ac-col-"],
    &.ac-collapse .fl-col {
        padding-right: 0;
        padding-left: 0;
    }
    &.ac-collapse > .uncollapse {
        padding-right: $gutter;
        padding-left: $gutter;
    }
    &.inline {
        > [class*="ac-col-"] {
            display: inline-block;
            vertical-align: top;
        }
    }
}

.fl-row {
	&.ac-collapse {
		.fl-col-group {
			margin-left: 0;
			margin-right: 0;
		}
		// .fl-col {
		// 	padding-left: 0;
		// 	padding-right: 0;
		// }
	}
}

 // Some flexbox stuff
.row, .grid {
    &.flexwrap, &.flexrow {
        @include flexbox( 'row' );
        &:before, &:after {
            content: initial;
        }
        &.centered {
            justify-content: center;
        }
    }
    &.flexwrap {
        flex-wrap: wrap;
    }
    .flexcol {
    	@include flexbox();
    	> div, .flex-container {
    		display: block;
    		flex: 1;
    	}
    }
}
 // Remove margin for grid
.grid {
    margin: 0;
}

[class*="ac-col-"],
.fl-col {
    padding-right: $gutter;
    padding-left: $gutter;
    // display: block;
    // width: 100%;
    // float: none;
    box-sizing: border-box;
    &.ac-collapse, .ac-collapse & {
        padding-right: 0;
        padding-left: 0;
        .uncollapse, &.uncollapse {
        	padding-right: $gutter;
        	padding-left: $gutter;
        }
    }
} // end .ac-column

.fl-col-small {
	max-width: none !important;
}
.fl-col-group-equal-height {
	width: auto !important;
}

// Base Grid
@include grid( 'base' );

// Iterate over our breakpoint map to create the grid
@each $breakpoint, $size in $breakpoints {
    @include breakpoint( $breakpoint ) {
        @include grid( $breakpoint );
    }
}